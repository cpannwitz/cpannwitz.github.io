{"version":3,"sources":["webpack:///./src/components/AboutMe/Avatar.tsx","webpack:///./src/components/AboutMe/AboutMe.tsx","webpack:///./src/pages/about.tsx","webpack:///./src/components/SEO/SchemaOrg.tsx","webpack:///./src/components/SEO/SEO.tsx","webpack:///./content/assets/icon.png"],"names":["Avatar","alt","src","Container","styled","div","AboutMe","data","useStaticQuery","avatar","site","siteMetadata","email","author","job","socialURLs","Box","horizontal","publicURL","name","title","loading","vertical","verticalRhythm","ml","SocialLinks","TextContainer","AboutPage","uri","aboutpage","SEO","pageData","slug","dangerouslySetInnerHTML","__html","html","React","memo","url","defaultTitle","datePublished","description","image","baseSchema","alternateName","schema","isBlogPost","itemListElement","position","item","headline","publisher","mainEntityOfPage","Helmet","type","JSON","stringify","SEOraw","meta","page","siteUrl","thumbnail","childImageSharp","fluid","icon","date","undefined","defer","htmlAttributes","lang","language","content","property","twitterHandle","SchemaOrg","props","module","exports"],"mappings":"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","file":"component---src-pages-about-tsx-9127c7f8bba4d97c0d24.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\ninterface AvatarProps extends React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement> {}\n\nconst Avatar = ({ alt, src }: AvatarProps) => {\n  return (\n    <Container>\n      <img src={src} alt={alt} />\n    </Container>\n  )\n}\n\nexport default Avatar\n\nconst Container = styled.div`\n  width: 5rem;\n  height: 5rem;\n  border-radius: 100%;\n  overflow: hidden;\n  box-shadow: var(--shadow-default);\n`\n","import React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nimport SocialLinks from './SocialLinks'\nimport Avatar from './Avatar'\nimport Box from '../Box/Box'\nimport { AvatarFile, SiteMetadata } from '../../typings'\n\ntype GetAboutMeQuery = AvatarFile & SiteMetadata\ninterface AboutMeProps {}\n\nconst AboutMe = ({}: AboutMeProps) => {\n  const data = useStaticQuery<GetAboutMeQuery>(\n    graphql`\n      query {\n        ...GetAboutMe\n      }\n    `\n  )\n  const { avatar } = data\n  const { email, author, job, socialURLs } = data.site.siteMetadata\n\n  return (\n    <Box horizontal>\n      <Avatar src={avatar.publicURL} alt={avatar.name} title={author} loading='lazy' />\n\n      <Box vertical verticalRhythm ml='1rem'>\n        <b>{author}</b>\n        <small>{job}</small>\n        <SocialLinks email={email} {...socialURLs} />\n      </Box>\n    </Box>\n  )\n}\n\nexport default AboutMe\n","import React from 'react'\nimport styled from 'styled-components'\nimport { graphql, PageProps } from 'gatsby'\n\nimport AboutMe from '../components/AboutMe/AboutMe'\nimport SEO from '../components/SEO/SEO'\n\ntype AboutPageProps = PageProps<{\n  aboutpage: {\n    html: string\n  }\n}>\n\nconst AboutPage = ({ data, uri }: AboutPageProps) => {\n  const { aboutpage } = data\n  return (\n    <>\n      <SEO pageData={{ slug: uri, title: 'About' }} />\n      <h1>About</h1>\n      <AboutMe />\n      <TextContainer dangerouslySetInnerHTML={{ __html: aboutpage.html || '' }} />\n    </>\n  )\n}\n\nexport default AboutPage\n\nexport const pageQuery = graphql`\n  query {\n    ...GetAboutPage\n  }\n`\n\nconst TextContainer = styled.div`\n  margin-top: 4rem;\n`\n","import React from 'react'\nimport { Helmet } from 'react-helmet'\n\ninterface SchemaOrgProps {\n  author?: string\n  url: string\n  title: string\n  defaultTitle: string\n  datePublished?: string\n  description?: string\n  image?: string\n  isBlogPost?: boolean\n}\nexport default React.memo(\n  ({ author, title, url, defaultTitle, datePublished, description, image, isBlogPost }: SchemaOrgProps) => {\n    const baseSchema = [\n      {\n        '@context': 'http://schema.org',\n        '@type': 'WebSite',\n        url,\n        name: title,\n        alternateName: defaultTitle\n      }\n    ]\n\n    const schema = isBlogPost\n      ? [\n          ...baseSchema,\n          {\n            '@context': 'http://schema.org',\n            '@type': 'BreadcrumbList',\n            itemListElement: [\n              {\n                '@type': 'ListItem',\n                position: 1,\n                item: {\n                  '@id': url,\n                  name: title,\n                  image\n                }\n              }\n            ]\n          },\n          {\n            '@context': 'http://schema.org',\n            '@type': 'BlogPosting',\n            url,\n            name: title,\n            alternateName: defaultTitle,\n            headline: title,\n            image: {\n              '@type': 'ImageObject',\n              url: image\n            },\n            description,\n            author: {\n              '@type': 'Person',\n              url: url,\n              image: image,\n              name: author\n            },\n            publisher: {\n              '@type': 'Person',\n              url: url,\n              image: image,\n              name: author\n            },\n            mainEntityOfPage: {\n              '@type': 'WebSite',\n              '@id': url\n            },\n            datePublished\n          }\n        ]\n      : baseSchema\n\n    return (\n      <Helmet>\n        {/* Schema.org tags */}\n        <script type='application/ld+json'>{JSON.stringify(schema)}</script>\n      </Helmet>\n    )\n  }\n)\n","import React from 'react'\nimport { Helmet } from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport SchemaOrg from './SchemaOrg'\nimport { MetaData, PostFrontmatter, ProjectFrontmatter, SiteMetadata } from '../../typings'\n// @ts-ignore\nimport icon from '../../../content/assets/icon.png'\n\ninterface SEOrawProps extends SEOProps {\n  siteMetadata: MetaData\n}\n\nconst SEOraw = ({ isBlogPost, siteMetadata: meta, pageData: page }: SEOrawProps) => {\n  const title = page?.title ? `${page.title} | ${meta.title}` : meta.title\n  const description = page?.description || meta.description\n  const image = `${meta.siteUrl}${page?.thumbnail?.childImageSharp?.fluid.src || icon}`\n  const siteUrl = page?.slug ? `${meta.siteUrl}${page?.slug}` : meta.siteUrl\n  const datePublished = isBlogPost && page?.date ? page.date : undefined\n  return (\n    <>\n      <Helmet\n        defer={true}\n        htmlAttributes={{\n          lang: meta.language\n        }}\n      >\n        <title>{title}</title>\n        <meta name='description' content={description} />\n        <meta name='image' content={image} />\n\n        <meta property='og:url' content={siteUrl} />\n        <meta property='og:type' content={isBlogPost ? 'article' : 'website'} />\n        <meta property='og:title' content={title} />\n        <meta property='og:description' content={description} />\n        <meta property='og:image' content={image} />\n\n        <meta name='twitter:card' content='summary_large_image' />\n        <meta name='twitter:creator' content={meta.twitterHandle} />\n        <meta name='twitter:title' content={title} />\n        <meta name='twitter:description' content={description} />\n        <meta name='twitter:image' content={image} />\n      </Helmet>\n      <SchemaOrg\n        isBlogPost={isBlogPost}\n        url={siteUrl}\n        title={title}\n        image={image}\n        description={description}\n        datePublished={datePublished}\n        author={meta.author}\n        defaultTitle={title}\n      />\n    </>\n  )\n}\n\ninterface SEOProps {\n  isBlogPost?: boolean\n  pageData?: Partial<PostFrontmatter | ProjectFrontmatter>\n}\n\nconst SEO = (props: SEOProps) => {\n  const data = useStaticQuery<SiteMetadata>(graphql`\n    query {\n      ...SiteMetadata\n    }\n  `)\n\n  const { siteMetadata } = data.site\n  return <SEOraw siteMetadata={siteMetadata} {...props} />\n}\n\nexport default SEO\n","module.exports = __webpack_public_path__ + \"static/icon-e1cfd5f539afdbdb0408769d670c8f2e.png\";"],"sourceRoot":""}